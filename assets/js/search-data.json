{
  
    
        "post0": {
            "title": "Python Binary operations program",
            "content": "def takeinput(ct): numtype = input(ct+&quot;: int or bin?&quot;) num = input(ct+&quot;: please enter your number&quot;) if numtype == &quot;int&quot;: num = int(num) return num def bintoint(s): ct = 0 ans = 0 for i in s[::-1]: if i == &quot;1&quot;: ans += 2**ct ct += 1 return ans def inttobin(num): if num == 0: return 0 ct = 0 ans = &quot;&quot; while(2**ct &lt;= num): ct += 1 ct -= 1 while(ct &gt;= 0): if num &gt;= 2**ct: num -= 2**ct ans += &quot;1&quot; else: ans += &quot;0&quot; ct -= 1 return ans num1 = takeinput(&quot;1&quot;) num2 = takeinput(&quot;2&quot;) if type(num1) == type(&quot;a&quot;): num1 = bintoint(num1) if type(num2) == type(&quot;a&quot;): num2 = bintoint(num2) print(&quot;decimal sum: &quot;+str(num1+num2)) print(&quot;binary sum: &quot;+str(inttobin(num1+num2))) print(&quot;decimal difference: &quot;+str(num1-num2)) if num1 &gt;= num2: print(&quot;binary difference: &quot;+str(inttobin(num1-num2))) else: print(&quot;binary difference: -&quot;+str(inttobin(num2-num1))) print(&quot;decimal product: &quot;+str(num1*num2)) print(&quot;binary product: &quot;+str(inttobin(num1*num2))) print(&quot;decimal quotient: &quot;+str(num1//num2)) print(&quot;binary quotient: &quot;+str(inttobin(num1//num2))) print(&quot;decimal remainder: &quot;+str(num1%num2)) print(&quot;binary remainder: &quot;+str(inttobin(num1%num2))) . decimal sum: 8 binary sum: 1000 decimal difference: -2 binary difference: -10 decimal product: 15 binary product: 1111 decimal quotient: 0 binary quotient: 0 decimal remainder: 3 binary remainder: 11 .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/Binary",
            "relUrl": "/Binary",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "APCSP Final Blog Post",
            "content": "Final Exam: . Proof of completion: | Score = 49/50 = 98% | Question that I got wrong below: An open protocol isn’t owned by any company or organization, and are accessible to anyone on the internet. They create a standardized system for anything on the internet to use, making devide to device communication easier Night at the Musuem: . | . | The night at the musuem event was quite enjoyable, as I was able to see not only projects from my fellop APCSP and APCSA students, but I was able to look at a lot of cool projects from other fine arts classes which I found interesting. | Other APCSP and APCSA projects: A calendar website which allowed you to add and remove events | A clock app which enabled you to see the time in several countries, use a stopwatch or timer | An APCSA group made a project that allowed you to input as many numbers as you like, and it would give you statistical data relating to those numbers | . | A suggestion that I would make to improve the event would be to include some kind of suggested guide or order to make sure all visitors got a glimpse at every class’s work. | .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/finale/",
            "relUrl": "/finale/",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "APCSP Big Idea 4 - The Internet",
            "content": "4.1 Notes . Packet is a small amount of data | Sent through a road | IETF manages standard development connecting internet | Network access layer connects hadwaes of devices | Internet layer data transmisssion - router finds paths to next stop | Autonomous ystems are when internet providers interact | Transport layers: tcp: 3 way handshake, udp: more relaxed | WWW is not the internet: linked datapages | More resources = more failsafe procedure/redundancy | trace path from device to device Proof of Completion: . . | .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/idea4.1/",
            "relUrl": "/idea4.1/",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Python API for wikipedia",
            "content": "import wikipediaapi . wiki_wiki = wikipediaapi.Wikipedia(&#39;en&#39;) page_py = wiki_wiki.page(&#39;Python_(programming_language)&#39;) . page_py = wiki_wiki.page(&#39;Python_(programming_language)&#39;) print(&quot;Page - Exists: %s&quot; % page_py.exists()) # Page - Exists: True page_ele = wiki_wiki.page(&#39;Elephant&#39;) print(&quot;Page - Exists: %s&quot; % page_ele.exists()) page_john = wiki_wiki.page(&#39;John Cena&#39;) print(&quot;Page - Exists: %s&quot; % page_john.exists()) page_missing = wiki_wiki.page(&#39;dfhjhjkgdsjhkfs&#39;) print(&quot;Page - Exists: %s&quot; % page_missing.exists()) . Page - Exists: True Page - Exists: True Page - Exists: True Page - Exists: False . wiki_wiki = wikipediaapi.Wikipedia(&#39;en&#39;) print(&quot;Page - Title: %s&quot; % page_john.title) # Page - Title: Python (programming language) print(&quot;Page - Summary: %s&quot; % page_john.summary[0:1000]) # Page - Summary: Python is a widely used high-level programming language for . Page - Title: John Cena Page - Summary: John Felix Anthony Cena ( SEE-nə; born April 23, 1977) is an American professional wrestler, actor, and former rapper. He is currently signed to WWE. Widely regarded as one of the greatest professional wrestlers of all time, he is tied with Ric Flair for the most world championship reigns in professional wrestling history.Cena moved to California in 1998 to pursue a career as a bodybuilder, and switched to professional wrestling in 1999 before making his debut for Ultimate Pro Wrestling (UPW). He signed with the World Wrestling Federation (WWF, now WWE) in 2001 and was assigned to Ohio Valley Wrestling (OVW), its developmental territory. After moving to WWE&#39;s SmackDown roster in 2002, Cena gained fame and success after adopting the character of a trash-talking rapper. He won his first singles title, the United States Championship, in 2004. The next year, he won the WWE Championship, and his character soon changed into a clean-cut and heroic one. He led the company as its franchise play . print(page_john.fullurl) . https://en.wikipedia.org/wiki/John_Cena . for title in page_john.categories.keys(): print(&quot;%s: %s&quot; % (title, page_john.categories[title])) . Category:1977 births: Category:1977 births (id: ??, ns: 14) Category:21st-century American male actors: Category:21st-century American male actors (id: ??, ns: 14) Category:21st-century American male musicians: Category:21st-century American male musicians (id: ??, ns: 14) Category:21st-century American rappers: Category:21st-century American rappers (id: ??, ns: 14) Category:21st-century professional wrestlers: Category:21st-century professional wrestlers (id: ??, ns: 14) Category:All Wikipedia articles written in American English: Category:All Wikipedia articles written in American English (id: ??, ns: 14) Category:All articles with unsourced statements: Category:All articles with unsourced statements (id: ??, ns: 14) Category:American car collectors: Category:American car collectors (id: ??, ns: 14) Category:American football offensive linemen: Category:American football offensive linemen (id: ??, ns: 14) Category:American game show hosts: Category:American game show hosts (id: ??, ns: 14) Category:American male film actors: Category:American male film actors (id: ??, ns: 14) Category:American male professional wrestlers: Category:American male professional wrestlers (id: ??, ns: 14) Category:American male rappers: Category:American male rappers (id: ??, ns: 14) Category:American male television actors: Category:American male television actors (id: ??, ns: 14) Category:American male voice actors: Category:American male voice actors (id: ??, ns: 14) Category:American people of English descent: Category:American people of English descent (id: ??, ns: 14) Category:American people of French-Canadian descent: Category:American people of French-Canadian descent (id: ??, ns: 14) Category:American philanthropists: Category:American philanthropists (id: ??, ns: 14) Category:American professional wrestlers of Italian descent: Category:American professional wrestlers of Italian descent (id: ??, ns: 14) Category:American sportspeople of Italian descent: Category:American sportspeople of Italian descent (id: ??, ns: 14) Category:American television hosts: Category:American television hosts (id: ??, ns: 14) Category:Articles with BIBSYS identifiers: Category:Articles with BIBSYS identifiers (id: ??, ns: 14) Category:Articles with BNE identifiers: Category:Articles with BNE identifiers (id: ??, ns: 14) Category:Articles with BNF identifiers: Category:Articles with BNF identifiers (id: ??, ns: 14) Category:Articles with FAST identifiers: Category:Articles with FAST identifiers (id: ??, ns: 14) Category:Articles with GND identifiers: Category:Articles with GND identifiers (id: ??, ns: 14) Category:Articles with ISNI identifiers: Category:Articles with ISNI identifiers (id: ??, ns: 14) Category:Articles with J9U identifiers: Category:Articles with J9U identifiers (id: ??, ns: 14) Category:Articles with LCCN identifiers: Category:Articles with LCCN identifiers (id: ??, ns: 14) Category:Articles with MusicBrainz identifiers: Category:Articles with MusicBrainz identifiers (id: ??, ns: 14) Category:Articles with NKC identifiers: Category:Articles with NKC identifiers (id: ??, ns: 14) Category:Articles with NLK identifiers: Category:Articles with NLK identifiers (id: ??, ns: 14) Category:Articles with NTA identifiers: Category:Articles with NTA identifiers (id: ??, ns: 14) Category:Articles with PLWABN identifiers: Category:Articles with PLWABN identifiers (id: ??, ns: 14) Category:Articles with RERO identifiers: Category:Articles with RERO identifiers (id: ??, ns: 14) Category:Articles with SUDOC identifiers: Category:Articles with SUDOC identifiers (id: ??, ns: 14) Category:Articles with VIAF identifiers: Category:Articles with VIAF identifiers (id: ??, ns: 14) Category:Articles with WORLDCATID identifiers: Category:Articles with WORLDCATID identifiers (id: ??, ns: 14) Category:Articles with hCards: Category:Articles with hCards (id: ??, ns: 14) Category:Articles with short description: Category:Articles with short description (id: ??, ns: 14) Category:Articles with unsourced statements from April 2022: Category:Articles with unsourced statements from April 2022 (id: ??, ns: 14) Category:Articles with unsourced statements from February 2017: Category:Articles with unsourced statements from February 2017 (id: ??, ns: 14) Category:Articles with unsourced statements from March 2019: Category:Articles with unsourced statements from March 2019 (id: ??, ns: 14) Category:Articles with unsourced statements from May 2021: Category:Articles with unsourced statements from May 2021 (id: ??, ns: 14) Category:Articles with unsourced statements from October 2018: Category:Articles with unsourced statements from October 2018 (id: ??, ns: 14) Category:CS1 Spanish-language sources (es): Category:CS1 Spanish-language sources (es) (id: ??, ns: 14) Category:Catholics from Florida: Category:Catholics from Florida (id: ??, ns: 14) Category:Catholics from Massachusetts: Category:Catholics from Massachusetts (id: ??, ns: 14) Category:Charity fundraisers (people): Category:Charity fundraisers (people) (id: ??, ns: 14) Category:Childfree: Category:Childfree (id: ??, ns: 14) Category:Columbia Records artists: Category:Columbia Records artists (id: ??, ns: 14) Category:Commons category link is on Wikidata: Category:Commons category link is on Wikidata (id: ??, ns: 14) Category:East Coast hip hop musicians: Category:East Coast hip hop musicians (id: ??, ns: 14) Category:Exercise physiologists: Category:Exercise physiologists (id: ??, ns: 14) Category:Internet memes: Category:Internet memes (id: ??, ns: 14) Category:Living people: Category:Living people (id: ??, ns: 14) Category:Male actors from Massachusetts: Category:Male actors from Massachusetts (id: ??, ns: 14) Category:Male actors from Tampa, Florida: Category:Male actors from Tampa, Florida (id: ??, ns: 14) Category:Musicians from Tampa, Florida: Category:Musicians from Tampa, Florida (id: ??, ns: 14) Category:NWA/WCW/WWE United States Heavyweight Champions: Category:NWA/WCW/WWE United States Heavyweight Champions (id: ??, ns: 14) Category:OVW Heavyweight Champions: Category:OVW Heavyweight Champions (id: ??, ns: 14) Category:Pages using embedded infobox templates with the title parameter: Category:Pages using embedded infobox templates with the title parameter (id: ??, ns: 14) Category:Pages using infobox musical artist with associated acts: Category:Pages using infobox musical artist with associated acts (id: ??, ns: 14) Category:Pages using infobox person with multiple spouses: Category:Pages using infobox person with multiple spouses (id: ??, ns: 14) Category:People from Land o&#39; Lakes, Florida: Category:People from Land o&#39; Lakes, Florida (id: ??, ns: 14) Category:People from West Newbury, Massachusetts: Category:People from West Newbury, Massachusetts (id: ??, ns: 14) Category:Players of American football from Massachusetts: Category:Players of American football from Massachusetts (id: ??, ns: 14) Category:Pop rappers: Category:Pop rappers (id: ??, ns: 14) Category:Professional wrestlers from Florida: Category:Professional wrestlers from Florida (id: ??, ns: 14) Category:Professional wrestlers from Massachusetts: Category:Professional wrestlers from Massachusetts (id: ??, ns: 14) Category:Rappers from Florida: Category:Rappers from Florida (id: ??, ns: 14) Category:Rappers from Massachusetts: Category:Rappers from Massachusetts (id: ??, ns: 14) Category:Short description matches Wikidata: Category:Short description matches Wikidata (id: ??, ns: 14) Category:Spokespersons: Category:Spokespersons (id: ??, ns: 14) Category:Sportspeople from Essex County, Massachusetts: Category:Sportspeople from Essex County, Massachusetts (id: ??, ns: 14) Category:Sportspeople from Tampa, Florida: Category:Sportspeople from Tampa, Florida (id: ??, ns: 14) Category:Springfield College (Massachusetts) alumni: Category:Springfield College (Massachusetts) alumni (id: ??, ns: 14) Category:Springfield Pride football players: Category:Springfield Pride football players (id: ??, ns: 14) Category:Television personalities from Florida: Category:Television personalities from Florida (id: ??, ns: 14) Category:Television producers from Florida: Category:Television producers from Florida (id: ??, ns: 14) Category:Television producers from Massachusetts: Category:Television producers from Massachusetts (id: ??, ns: 14) Category:Use American English from October 2019: Category:Use American English from October 2019 (id: ??, ns: 14) Category:Use mdy dates from February 2022: Category:Use mdy dates from February 2022 (id: ??, ns: 14) Category:WWE Champions: Category:WWE Champions (id: ??, ns: 14) Category:Wikipedia articles needing clarification from May 2020: Category:Wikipedia articles needing clarification from May 2020 (id: ??, ns: 14) Category:Wikipedia indefinitely move-protected pages: Category:Wikipedia indefinitely move-protected pages (id: ??, ns: 14) Category:Wikipedia indefinitely semi-protected biographies of living people: Category:Wikipedia indefinitely semi-protected biographies of living people (id: ??, ns: 14) Category:World Heavyweight Champions (WWE): Category:World Heavyweight Champions (WWE) (id: ??, ns: 14) Category:Wrestling Observer Newsletter award winners: Category:Wrestling Observer Newsletter award winners (id: ??, ns: 14) . for s in page_john.sections: print(&quot;%s: %s - %s&quot; % (&quot;*&quot; * (1), s.title, s.text[0:100])) . *: Early life - John Felix Anthony Cena was born in West Newbury, Massachusetts, on April 23, 1977, the son of Carol *: Professional wrestling career - *: Professional wrestling style and persona - *: Acting career - *: Music career - In addition to his wrestling career, Cena is a rapper. He performed his fifth WWE theme song, &#34;Basic *: Other ventures - *: In popular culture - His catchphrase &#34;You Can&#39;t See Me&#34; originates from his early days of wrestling in the WWE where he w *: Personal life - Cena resides in Land o&#39; Lakes, Florida.He has said numerous times that he does not want to have chil *: Filmography - *: Awards and nominations - *: Championships and accomplishments - *: Notes - *: References - *: External links - John Cena on WWE.com John Cena at IMDb John Cena on Twitter John Cena&#39;s profile at Cagematch.net .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/2022/10/09/wikiapi.html",
            "relUrl": "/2022/10/09/wikiapi.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions # AP Video Notes # Video #1:- Logic Error: Algorithmic mistake- Syntax Error: language mistakes, not following language rule | Runtime Error: Program Crashes, &quot;bug&quot;, cannot complete process, /0, wrong data type, forever loop | Overflow Error, not enough memory # Video #2: | Syntax Errors are the easiest to debug, as the output shows where the error is | Logic errors are hard to notice, make testcases that work/don&#39;t work, border cases hand tracing can be useful with loops | . | Use debuggers and/or print statements # Video #3: | &quot;How will we know if a program is working properly&quot; - program specifications | try corner and border cases to make sure that it will work | test, find mistakes, edit, update. # Proof: | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. # My fix: I printed i+1, as each letter was one less that it should have been | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter z is the 26 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. # My Fix: I did the same as before, and moved the initialization of the Count | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter x is the 24 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) # My Fix: Changed the initial value of i from 0 to 1 | . evens = [] i = 1 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a while loop. . See Above . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . My Fix: . I checked the remainder when divided by 2 to be 1 rather than 0 . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. # My Fix: Change if for the remainder with five to elif | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) while item != &quot;stop&quot;: total += menu[item] #print(total) item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(&quot;$&quot;,round(total,3)) . Menu burger $3.99 fries $1.99 drink $0.99 $ 6.97 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "1.3 Program Design",
            "content": "Video Notes: . Daily Video 1: . All Programs start with an idea | People start investigating the problem | Requirements/Constraints Constraints can be time, resources | User interests | . | user surver and testing | interviews | Brainstorm | storyboard | Plan user experience | laying out interface | organizing modules | Testing strategy | Requirements describe how a program should behave | list of user interactions | . | prototype, then keepr refining | A LOT OF TESTING | testing, feedback, reflection, repreat Daily Video 2: . | Mostly group projects | everyone gets credit and their names should be on the documentation | bugs are assigned for different people | comments | you can use code from other, but you need to credit | authors name and program(works cited) Daily Video 3: . | Program documentation describes program, spece, functiions, methods,and more | use documentation to keep track of progress | it helps with efficiency and memory over time | shows respnse to bug | Use comments in language or a text document | comments make collaboration | comments in python follow # | comments in java follow //, /*, or /** along with other languages | comment blocks in scratch can be minimized Proof of quiz completion: . https://azeem-khan1.github.io/fastpages-project/hacks/programdesign_1-3#other-hacks . | .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/markdown/2022/10/02/onepointthree.html",
            "relUrl": "/markdown/2022/10/02/onepointthree.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "AWS Hacks",
            "content": "Output of Curl . . Before File . . After File(Editing from outside) . . Running Group Flask with public IP . . Various Commands . .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/markdown/2022/10/02/AWShacks.html",
            "relUrl": "/markdown/2022/10/02/AWShacks.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "JavaScript Tutorial",
            "content": "| Gallery/ | Science | Grades | About | Table | Notes | Javascript | API | Snake | . . JavaScript references . JavaScript is the most important language you need to learn as a frontend developer. It&#39;s a great first language for web developers to learn. . W3Schools - reference | feecodecamp.org - pbl . | javascript30.com - pbl . | . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Chinmay&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Anthony&#39;, ghID: &#39;tonyhieu&#39;, classOf: 2022, role: &#39;Student&#39; }, Person { name: &#39;Bria&#39;, ghID: &#39;B-G101&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Allie&#39;, ghID: &#39;xiaoa0&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Tigran&#39;, ghID: &#39;Tigran7&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Rebecca&#39;, ghID: &#39;Rebecca-123&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Vidhi&#39;, ghID: &#39;unknown&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Anthony | tonyhieu | 2022 | Student | Bria | B-G101 | 2023 | Student | Allie | xiaoa0 | 2023 | Student | Tigran | Tigran7 | 2023 | Student | Rebecca | Rebecca-123 | 2023 | Student | Vidhi | unknown | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "APCSP Big Idea 2 - Program Purpose and Function Notes",
            "content": "1.2 video 1: . Lots of different computing innovations | guiding questions(social media): why does innovation exist?(communicating over a long distance) | what problems does it solve?(save time and money required to communicate with someone far away) | what does it allow us to do that we previously couldn’t? 1.2 video 2: . | . | input is something taken in by a user(text, audio, video, text, touch) | output is what the program does or returns to you passed, usually based on the input(same types as above) | events are initiated through input | code is not necessarily in order segments are triggered when event occurs 1.2 video 3: . | . | program = collection of statements | group of statements = code segment(executed according to event) | description of code segments state what it does so a person could use it for their own purpose. Proof of completion: . . | .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/idea1.2/",
            "relUrl": "/idea1.2/",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Focus and Habits",
            "content": "10 Habits for Good Mental Health and a Good and Happy life . We can always improve our well being | Material things and life circumstances doesn’t matter all that much | Takes effort to become happier | Recognize that your mind lies to you about what makes you happy | Spend more time with others | Helping others more than yourself | Make time for gratitude | Healthy practices for the body(eating healthy, exercising) | Be in the present moment | Prioritize time over money | Things I can do to use these ideas . Before I go to bed, think about what I did that day, what I can do better, and what I did well on | Stop wanting/asking things from other people, because all it will do is make me want more things | Implement all my other points :) | Think about what I want, and analyze weather it is a material thing that will make me temporarily happy or not | Play games and hang out with friends, and teach my little sister stuff | Notice other people’s situations, and try to help them if you can, and if they need to. | Similar to #1, take a couple of minutes at night to think about what I was grateful for that day | Play badminton with my dad and friends more | Think about what I’m doing at all times, including subconscious things like eating or biking | I don’t really make money, but having better time management skills | My goals for this year . Get straight A’s in all of my classes | Gain better work and study habits for school and extracurricular activities | Keep time for myself to be in the moment | Note of Gratitude . I am grateful for my parents, teachers, and friends for supporting me along m high school journey. In this class, I’d like to thank my scrum team, comprising of Varalu, Azeem, and Colin, for answering whatever questions I have, and genuinely being great and funny people who continue to motivate me . Thank You! .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/habits/",
            "relUrl": "/habits/",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "APCSP Big Idea 1 - Collaboration Notes",
            "content": "1.1 Part 1 Notes . Collaboration is an essential part of any kind of computer science or work in the industry | Famous things are made through collaboration, like facebook and the Super Mario games | Collaboration allows for multiple ideas from multiple different backgrounds to come together an make something amazing | It expands out horizons and helps everyone 1.1 Part 2 Notes . | Pair programming is a concept where two programmers collaborate on a project The driver does the code, while the navigator gives suggestions the navigator needs to find a happy balance between forcing the driver to do things and being fully hands-off | . | . | Think-Pair-Share is a technique used to get an idea and fully develop it Think of an idea | combine with a partner’s idea | share to the class | . | Comments in code help yourself and other people know what you did and what you will do | Collaboration tools repl | github | shared doc | friends and family | . | . .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/idea1/",
            "relUrl": "/idea1/",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Sprint Backlog",
            "content": "Educational Tips Fun Zone (Create Task Ideas) Blogging and Review . look over common exam questions | input based studying tool | Debug code without help | . Watch test prep youtube videos | choose your own adventure type game | create a study calendar | . Khan Academy APCSP | movie review app | partner quiz and study | .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/sprintbacklog/",
            "relUrl": "/sprintbacklog/",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Pseudocode ranking app",
            "content": "Rank everything app . Show ready screen with input box | prompts user for name of list | maintain a list of all the items in ranked order | repeat the following until user inputs “DONE”: once name is given, prompts user for first item | initially keep the best item as the first and the worst item as the last | repeat the following steps until best item is the same as worst item: ask the user if the item is better or worse than the middle of best and worst; | if it is better, worst becomes the middle | if not, best becomes the middle | . | add the new element to the location that has been found | . | after it is over, show all the elements in sorted order with numbers for the rankings | maybe also have settings for music, backgrounds, and themes | .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/markdown/2022/09/12/create.html",
            "relUrl": "/markdown/2022/09/12/create.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Pseudocode App Ninjago Quiz",
            "content": "Psuedocode for project (&amp; plaintext) . Theme: Ninjago . Initialize variable correct to 0 Initialize variable num_question to 3 . SHOW Ready to begin page . IF user click on ready button, show first question | . SHOW Question one Screen Four buttons show question on top: Which Season does Ninjago: Prime Empire follow the pattern of? . Skybound . Possession . Secrets of Forbidden Spinjitzu . Crystalized . IF they press the correct button (skybound), display a quick correct message and move to question 2 ELSE they chose wrongly, display a quick incorrect message with correct answer (skybound) and move to question 2 . SHOW Question two Screen Four buttons What is the name of the forest that Lloyd and Sensei Garmadon escape through . Hiroshi’s Labrynth . Pirmeval’s Eye . Forest of Transquility . Jankikai Jungle . IF they press the correct button (Hiroshi’s Labrynth), display a quick correct message and move to question 3 ELSE they chose wrongly, display a quick incorrect message with correct answer (Hiroshi’s Labrynth) and move to question 3 . SHOW Question 3 Screen Four buttons in the lego.com game Chen&#39;s return, how many golden bricks can you attain? . 25 . 13 . 40 . 160 . IF they press the correct button (13), display a quick correct message and move to question 3 ELSE they chose wrongly, display a quick incorrect message with correct answer (13) and move to question 3 . After all three questions: move to the final screen Has a button to reset displays the score of the player and the percent of the score LINK .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/markdown/2022/09/11/ninjacode.html",
            "relUrl": "/markdown/2022/09/11/ninjacode.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "An Example Markdown Post",
            "content": "I switched my theme to the hacker theme(screenshot below) | Something I noticed was that my pages didn’t show up with this theme | so no matter how cool it looked, i couldn’t access my pages :( | Finally, i settled with dark mode | .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/markdown/2022/09/05/htmlhacks.html",
            "relUrl": "/markdown/2022/09/05/htmlhacks.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Python Lists and Dictionaries",
            "content": "sentence = &quot;&quot; counter = {}#Creates a dictionary to store characters and the number of times they show up distinct = []#Creates list to store distinct characters while sentence != &quot;done!&quot;:#repeats code till user inputs done sentence = input(&quot;Enter a Sentence&quot;)#asks for user input for i in sentence: if i not in counter: counter[i] = 0#for every new letter, create a new entry in the dictionary and add it to the distinct list distinct.append(i) counter[i] += 1#add to entry of dictionary for i in counter: print(i,&quot; : &quot;,counter[i])#prints each entry of dictionary print(sorted(distinct))#sorts distinct characters in alphabetical order and prints sorted list . f : 11 d : 11 j : 6 : 4 s : 7 h : 9 k : 2 1 : 1 2 : 1 % : 2 ^ : 2 &amp; : 4 b : 1 u : 5 8 : 9 7 : 10 w : 2 e : 5 * : 4 c : 1 9 : 6 ( : 1 - : 2 = : 2 n : 7 i : 2 t : 2 3 : 2 5 : 1 v : 1 r : 3 ! : 3 @ : 1 y : 2 R : 1 Y : 1 H : 1 C : 1 ] : 1 o : 1 [&#39; &#39;, &#39;!&#39;, &#39;%&#39;, &#39;&amp;&#39;, &#39;(&#39;, &#39;*&#39;, &#39;-&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;5&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;=&#39;, &#39;@&#39;, &#39;C&#39;, &#39;H&#39;, &#39;R&#39;, &#39;Y&#39;, &#39;]&#39;, &#39;^&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;n&#39;, &#39;o&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;y&#39;] .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/hacks/2022/08/31/pylist.html",
            "relUrl": "/hacks/2022/08/31/pylist.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Vlumun",
            "content": "Almost 800 million people globally spend 10% of their family budgeting on healthcare (World Health Organization). Whether it be sickness, prescription medical care, surgeries and treatments, or medical treatment, costs for simple treatments are exorbitant. This unnecessary cost for simple, high quality healthcare affects no group more than the people of developing countries. However, developing countries lack both the expertise and the infrastructure to have high quality medical care. Healthcare in developing countries has poor infrastructure and very expensive treatments. Most medical professionals in these countries also do not follow an evidence-based approach to diagnosing and treating a patient (Peabody, John W., et al). Even with constant attention and investment in developing regions, life expectancy is still a full ten years under developed regions and under-five mortality rates are nine times higher than those in developed countries, about 54 per 1,000 live births (United Nations). Without taking the proper steps to reevaluate both the developing and developed healthcare systems and taking meaningful steps to stop these problems, we may never be able to live in a world where we are all guaranteed the basic human right of survival. . The United Nations along with the World Health Organization have taken steps to either reevaluate or work with the healthcare sector in developing countries. An older initiative taken by the UN, WHO, and other global medical bodies was to eradicate polio from the face of the earth. Adopted in 1988, the Global Polio Eradication Initiative (GPEI) mainly focuses on delivering oral vaccines to communities at high risk of polio (Centers for Disease Control and Prevention). So far the GPEI has eradicated 99.9% of all known poliovirus globally (Centers for Disease Control and Prevention). Such initiatives are targeted and improve specific portions of the medical industry, but don’t support developing countries enough. The UN has set up a set of Sustainable Development Goals aimed towards developing countries. In specific, three: equal healthcare for all, will provide the largest benefit towards developing nations (United Nations). While the timeline for these goals end between 2020 and 2030, considerable progress has been made towards completion. . Canada’s current medical healthcare system is a free, decentralized universal healthcare system. The 13 provinces of Canada fund the healthcare plan that is available to all permanent residents and citizens (Authors Roosa Tikkanen, et al). The funding works towards hospital bills, even with some procedures coming at no cost to the patient. From a doctorial perspective, the Canadian Medical Association (CMA) connects physicians and practitioners nationally, allowing for a quick exchange of information and an increase of knowledge through all of Canada’s provinces (Canadian Medical Association). The government of Canada also utilizes the Medical Council of Canada (MCC) as a major board for testing incoming medical students. The MCCQE (Medical Council of Canada Qualifying Examination) is a two part exam that tests all medical students on their proficiency in the subjects at hand, and also regulates medical licenses throughout Canada (Canadian Medical Association). To assist developing countries’ healthcare systems, Canada joined the WHO’s ACT-Accelerator partnership, which sends COVID-19 vaccines, tests, and therapeutics to those in need globally, and has donated $40 million Canadian dollars to epidemic prevention and preparedness (Canda). Canada has a streamlined, connected, and sophisticated healthcare system that allows for the prosperity of its citizens. . To combat this, the Delegation of Canada seeks to allow medical practitioners in developing countries to be better educated. The Delegation of Canada also seeks to connect healthcare providers with the fiscal resources to provide free universal healthcare to their patients. The education initiatives will be implemented through a United Nations Subcommittee dedicated to creating and enforcing evidence-based diagnosis and treatment. A WHO sponsored curriculum will be created regarding evidence-based diagnosis and treatment. This curriculum will be distributed to developing countries, and also offer incentives for doctors to join a UN sponsored NGO to enforce rules upon doctors who sign up. This NGO will consist of supporting fiscal sponsors, delegates of member-states dedicated to the cause, volunteering trained professionals, a board of inspectors, and the doctors who sign on as well. Doctors who are a part of the NGO, will pay those who abide by its guidelines livable wages to help support their families and communities. Members of the NGO can also communicate about epidemics around the world, allowing them to remain connected to the world. This allows doctors that are a part of the UNUDDC to be fiscally supported, allowing rural economies to burgeon, and can allow doctors to communicate effectively with the global community. This multifaceted plan will be funded by sponsoring and signing countries. .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/2022/08/29/vlumun.html",
            "relUrl": "/2022/08/29/vlumun.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Python Quiz",
            "content": "This is my quiz about python! First, I greet the user, and ask them if they are ready Whatever their response is, I respond appropriately and begin he quiz I generate two lists, one with 5 questions and the other with the corresponding answers to the questions I iterate through the list, asking the user for the answer to the input If the answer is correct, I add one to the score I then print the number they have correct so far At the end, i print their total number correct out of 5, and calculate the percentage . import getpass, sys print(&quot;Hello, &quot;+getpass.getuser()+&quot;. Prepare to fail(but not actually)&quot;) print(&quot;You will be graded out of 5 questions and will have a final score out of 5 and a percentage&quot;) if input(&quot;Ready?&quot;) == &quot;yes&quot;: print(&quot;Great, let&#39;s go!&quot;) else: print(&quot;Too bad, we&#39;re still doing it&quot;) questions = [&quot;What command is used to include other functions that were previously developed?&quot;, &quot;What command is used to evaluate correct or incorrect response in this example?&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;How many equal signs do you need to use in a comparison?&quot;, &quot;What keyword defines a function?&quot;] answers = [&quot;import&quot;,&quot;if&quot;,&quot;expression&quot;,&quot;2&quot;,&quot;def&quot;] #Keeping a list of questions and answers to compare correct = 0 for i in range(1,6): ans = input(&quot;Question &quot;+str(i)+&quot;: &quot;+questions[i-1])#Asking question to user if ans == answers[i-1]: print(ans+&quot; is correct &quot;) correct+=1#Adding to score if answer is correct else: print(ans+&quot; is wrong&quot;) print(str(correct)+&quot;/&quot;+str(i)) print(&quot;Final Score: &quot;+str(correct)+&quot;/&quot;+&quot;5 &quot;+str(correct*100/5)+&quot;%&quot;)#Multipyling by 100 to get percentages print(&quot;Good Job!&quot;) . Hello, chinmay. Prepare to fail(but not actually) You will be graded out of 5 questions and will have a final score out of 5 and a percentage Too bad, we&#39;re still doing it import is correct 1/1 if is correct 2/2 expression is correct 3/3 da is wrong 3/4 def is correct 4/5 Final Score: 4/5 80.0% Good Job! .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/hacks/2022/08/28/quiz.html",
            "relUrl": "/hacks/2022/08/28/quiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "An Example Markdown Post",
            "content": "Hello! . See, I can do this stuff . Can you read this? .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/markdown/2022/08/24/firstpost.html",
            "relUrl": "/markdown/2022/08/24/firstpost.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Bash Notebook",
            "content": "Bash Hacks . echo &quot;_________________________________________________________&quot; echo &quot;Hack #1: Using bash to check versions of things&quot; echo &quot;_________________________________________________________&quot; bash --version conda --version python --version git --version echo &quot;_________________________________________________________&quot; echo &quot;Hack #2: Using anaconda to list all the tools&quot; echo &quot;_________________________________________________________&quot; conda list echo &quot;_________________________________________________________&quot; echo &quot;Hack #3: Using git commands to update the repository&quot; echo &quot;_________________________________________________________&quot; echo &quot;use commands git add [filename], git commit[filename], and git push&quot; . _________________________________________________________ Hack #1: Using bash to check versions of things _________________________________________________________ GNU bash, version 5.0.17(1)-release (x86_64-pc-linux-gnu) Copyright (C) 2019 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt; This is free software; you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. conda 4.13.0 Python 3.9.12 git version 2.25.1 _________________________________________________________ Hack #2: Using anaconda to list all the tools _________________________________________________________ # packages in environment at /home/chinmay/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 _________________________________________________________ Hack #3: Using git commands to update the repository _________________________________________________________ use commands git add [filename], git commit[filename], and git push . Automating python and java installation . export password=PASSWORD echo $password echo $password | sudo -S apt update # update package list echo $password | sudo -S apt upgrade # upgrade packages echo $password | sudo -S apt install python2 # install python2 for package dependencies echo $password | sudo -S apt install python3 python3-pip # install python3 and pip3 for development python --version # version of python3 should be shown echo $password | sudo -S apt install default-jdk default-jre # java install java --version # java runtime version javac --version # java compiler version sudo apt install unzip . PASSWORD Hit:1 http://archive.ubuntu.com/ubuntu focal InRelease Hit:2 http://archive.ubuntu.com/ubuntu focal-updates InRelease Hit:3 http://security.ubuntu.com/ubuntu focal-security InRelease Hit:4 http://archive.ubuntu.com/ubuntu focal-backports InRelease Reading package lists... Done Building dependency tree Reading state information... Done 9 packages can be upgraded. Run &#39;apt list --upgradable&#39; to see them. Reading package lists... Done Building dependency tree Reading state information... Done Calculating upgrade... Done The following packages will be upgraded: base-files libxslt1.1 linux-libc-dev motd-news-config open-vm-tools python-apt-common python3-apt python3-distupgrade ubuntu-release-upgrader-core 9 upgraded, 0 newly installed, 0 to remove and 0 not upgraded. 3 standard security updates Need to get 2263 kB of archives. After this operation, 0 B of additional disk space will be used. Do you want to continue? [Y/n] Abort. Reading package lists... Done Building dependency tree Reading state information... Done python2 is already the newest version (2.7.17-2ubuntu4). 0 upgraded, 0 newly installed, 0 to remove and 9 not upgraded. Reading package lists... Done Building dependency tree Reading state information... Done python3 is already the newest version (3.8.2-0ubuntu2). python3-pip is already the newest version (20.0.2-5ubuntu1.6). 0 upgraded, 0 newly installed, 0 to remove and 9 not upgraded. Python 3.9.12 Reading package lists... Done Building dependency tree Reading state information... Done default-jdk is already the newest version (2:1.11-72). default-jre is already the newest version (2:1.11-72). 0 upgraded, 0 newly installed, 0 to remove and 9 not upgraded. openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) javac 11.0.16 Reading package lists... Done Building dependency tree Reading state information... Done unzip is already the newest version (6.0-25ubuntu1). 0 upgraded, 0 newly installed, 0 to remove and 9 not upgraded. . Checking if directory exists,and seeing if the APCSP directory is there. . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/fastpages # change vscode to different name to test git clone export project=$project_dir/chinmay_fastpages # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/chinmaydr/chinmay_fastpages&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/chinmay/fastpages exists. Directory /home/chinmay/fastpages/chinmay_fastpages exists. . Listing all files in my directory . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . Navigate to project, then navigate to area wwhere files were cloned /home/chinmay/fastpages/chinmay_fastpages list top level or root of files with project pulled from github 2022-05-15-07-21-16.png README.md _notebooks assets 2022-05-15-07-24-25.png _action_files _pages docker-compose.yml 2022-05-15-07-25-15.png _config.yml _plugins images Gemfile _fastpages_docs _posts index.html LICENSE _includes _sass Makefile _layouts _word list again with hidden files pulled from github . Gemfile _pages .. LICENSE _plugins .devcontainer.json Makefile _posts .git README.md _sass .gitattributes _action_files _word .github _config.yml assets .gitignore _fastpages_docs docker-compose.yml 2022-05-15-07-21-16.png _includes images 2022-05-15-07-24-25.png _layouts index.html 2022-05-15-07-25-15.png _notebooks list all files in long format total 409 drwxr-xr-x 1 chinmay chinmay 512 Aug 24 14:17 . drwxr-xr-x 1 chinmay chinmay 512 Aug 22 14:29 .. -rw-r--r-- 1 chinmay chinmay 420 Aug 22 14:29 .devcontainer.json drwxr-xr-x 1 chinmay chinmay 512 Aug 24 14:38 .git -rw-r--r-- 1 chinmay chinmay 84 Aug 22 14:29 .gitattributes drwxr-xr-x 1 chinmay chinmay 512 Aug 22 14:29 .github -rw-r--r-- 1 chinmay chinmay 161 Aug 22 14:29 .gitignore -rw-r--r-- 1 chinmay chinmay 207007 Aug 22 14:29 2022-05-15-07-21-16.png -rw-r--r-- 1 chinmay chinmay 90979 Aug 22 14:29 2022-05-15-07-24-25.png -rw-r--r-- 1 chinmay chinmay 81691 Aug 22 14:29 2022-05-15-07-25-15.png -rwxr-xr-x 1 chinmay chinmay 1304 Aug 22 14:29 Gemfile -rw-r--r-- 1 chinmay chinmay 11351 Aug 22 14:29 LICENSE -rwxr-xr-x 1 chinmay chinmay 1422 Aug 22 14:29 Makefile -rwxr-xr-x 1 chinmay chinmay 3632 Aug 23 14:21 README.md drwxr-xr-x 1 chinmay chinmay 512 Aug 23 14:21 _action_files -rw-r--r-- 1 chinmay chinmay 3693 Aug 23 14:21 _config.yml drwxr-xr-x 1 chinmay chinmay 512 Aug 23 14:21 _fastpages_docs drwxr-xr-x 1 chinmay chinmay 512 Aug 22 14:29 _includes drwxr-xr-x 1 chinmay chinmay 512 Aug 22 14:29 _layouts drwxr-xr-x 1 chinmay chinmay 512 Aug 28 14:40 _notebooks drwxr-xr-x 1 chinmay chinmay 512 Aug 22 14:29 _pages drwxr-xr-x 1 chinmay chinmay 512 Aug 22 14:29 _plugins drwxr-xr-x 1 chinmay chinmay 512 Aug 24 14:26 _posts drwxr-xr-x 1 chinmay chinmay 512 Aug 22 14:29 _sass drwxr-xr-x 1 chinmay chinmay 512 Aug 23 14:21 _word drwxr-xr-x 1 chinmay chinmay 512 Aug 22 14:29 assets -rwxr-xr-x 1 chinmay chinmay 1136 Aug 22 14:29 docker-compose.yml drwxr-xr-x 1 chinmay chinmay 512 Aug 23 14:21 images -rw-r--r-- 1 chinmay chinmay 526 Aug 24 14:17 index.html . Looking for/ listing my markdown files . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . Look for posts /home/chinmay/fastpages/chinmay_fastpages/_posts total 8 -rwxr-xr-x 1 chinmay chinmay 1966 Aug 22 14:29 2020-01-14-test-markdown-post.md -rw-r--r-- 1 chinmay chinmay 64 Aug 23 14:16 2022-08-24-firstpost.md -rw-r--r-- 1 chinmay chinmay 720 Aug 22 14:29 README.md . Looking for/ listing my notebooks . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . Look for notebooks /home/chinmay/fastpages/chinmay_fastpages/_notebooks total 4060 -rw-r--r-- 1 chinmay chinmay 3162384 Aug 22 14:29 2020-02-20-test.ipynb -rw-r--r-- 1 chinmay chinmay 1179 Aug 24 14:35 2022-08-23-chinmaynb.ipynb -rw- 1 chinmay chinmay 578413 Aug 28 14:40 2022-08-24-bashtest.html -rw-r--r-- 1 chinmay chinmay 0 Aug 24 13:53 2022-08-24-bashtest.ipynb -rw-r--r-- 1 chinmay chinmay 771 Aug 22 14:29 README.md drwxr-xr-x 1 chinmay chinmay 512 Aug 22 14:29 ghtop_images drwxr-xr-x 1 chinmay chinmay 512 Aug 22 14:29 my_icons -rw-r--r-- 1 chinmay chinmay 42 Aug 23 15:01 script.py . Looking for/listing images . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . Look for images in notebooks, print working directory, list files bash: cd: /home/chinmay/fastpages/chinmay_fastpages/_notebooks/images: No such file or directory /home/chinmay/fastpages/chinmay_fastpages/_notebooks total 4060 -rw-r--r-- 1 chinmay chinmay 3162384 Aug 22 14:29 2020-02-20-test.ipynb -rw-r--r-- 1 chinmay chinmay 1179 Aug 24 14:35 2022-08-23-chinmaynb.ipynb -rw- 1 chinmay chinmay 578413 Aug 28 14:40 2022-08-24-bashtest.html -rw-r--r-- 1 chinmay chinmay 0 Aug 24 13:53 2022-08-24-bashtest.ipynb -rw-r--r-- 1 chinmay chinmay 771 Aug 22 14:29 README.md drwxr-xr-x 1 chinmay chinmay 512 Aug 22 14:29 ghtop_images drwxr-xr-x 1 chinmay chinmay 512 Aug 22 14:29 my_icons -rw-r--r-- 1 chinmay chinmay 42 Aug 23 15:01 script.py . Printing data in my first markdown . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project/_posts echo &quot;show the contents of 2022-08-24-firstpost.md&quot; echo &quot;&quot; cat 2022-08-24-firstpost.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of 2022-08-24-firstpost.md&quot; . Navigate to project, then navigate to area wwhere files were cloned show the contents of 2022-08-24-firstpost.md # Hello! #### See, I can do this stuff ###### Can you read this? end of 2022-08-24-firstpost.md .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/week%201/2022/08/24/bashtest.html",
            "relUrl": "/week%201/2022/08/24/bashtest.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "My first Python Notebook",
            "content": "print(&quot;Hello, My name is Chinmay&quot;) . Hello, My name is Chinmay .",
            "url": "https://chinmaydr.github.io/chinmay_fastpages/hacks/2022/08/23/chinmaynb.html",
            "relUrl": "/hacks/2022/08/23/chinmaynb.html",
            "date": " • Aug 23, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "ASW Hacks",
          "content": "Output of Curl . . Before File . . After File . . Running Azeem’s Blog . .",
          "url": "https://chinmaydr.github.io/chinmay_fastpages/posts/2022-10-02-AWShacksmd",
          "relUrl": "/posts/2022-10-02-AWShacksmd",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "Science",
          "content": "This website is powered by fastpages 1. . . Welcome to my science blog! . Here is where you’ll find all my science videos, coding projects, notes, and more! . Video on the Four Fundamental Forces: . Link . Video on Interstellar Travel: . Link . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://chinmaydr.github.io/chinmay_fastpages/Science/",
          "relUrl": "/Science/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . Hi Everyone! . ..* My name is Chinmay Diwakar Ramamurthy . ..* I go to Del Norte High School, and I’m in the AP CompSci Principles Class, but you all knew that . ..* I’m part of Del Norte’s robotics team, Team Optix#3749, where I am a member of the electrical team which manages all te wiring and the electrical system of the robot . ..* In my free time(I know right, what free time?) I like to code on my own, as well as read and write my own stories . So yeah! Welcome to my blog, and have fun reading the….like 3 pages I have . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://chinmaydr.github.io/chinmay_fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Frontend",
          "content": "| Gallery/ | Science | Grades | About | Table | Notes | Javascript | API | Snake | .",
          "url": "https://chinmaydr.github.io/chinmay_fastpages/frontend/",
          "relUrl": "/frontend/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "Gallery",
          "content": "This website is powered by fastpages 1. . . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://chinmaydr.github.io/chinmay_fastpages/gallery/",
          "relUrl": "/gallery/",
          "date": ""
      }
      
  

  

  

  
      ,"page8": {
          "title": "Notes",
          "content": "This website is powered by fastpages 1. . Week 0 . - Installed Everything we needed . - Anaconda . - WSL . - VsCode . - Github . - Made a copy of the fastpages repository . - Made our first python notebook . - Created a markdown file . - added everything to out blog . Week 1 . - Learned about bash . - created a bash notebook . - learned about verification with bash . - completed the bash hacks to answer some basic bas questions . - Updated out blogs with cool new pages and cometics(LIKE THIS!!!) . - Made new pages . - Inserted images . - Made another python notebook . - Learned basic python syntax . - created a program that would quiz the user and calculate the score . Week 2 . Learned about Html Changed blog theme | created a table with tags to see the different posts | . | Expanded my python knowledge Leaned about dictionaries and lists | learned about ways to iterate over lists and dictionaries while and for loops, recursion Week 3 . | . | . | Created accounts on Code.org made simple quiz with partner(Ninjago quiz with Varalu) | Created plans for my own app(random movie review app) | . | Created a scrum board as a to-do list of all the things I need to complete | Created a sprint backlog table listing all of my study ideas and plans | . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://chinmaydr.github.io/chinmay_fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  

  
  

  
      ,"page18": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://chinmaydr.github.io/chinmay_fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}